//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace cangku {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("WMSDataSet6")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class WMSDataSet6 : System.Data.DataSet {
        
        private GoodsDataTable tableGoods;
        
        private RecordsDataTable tableRecords;
        
        private StoreDataTable tableStore;
        
        private UsersDataTable tableUsers;
        
        private WarehousesDataTable tableWarehouses;
        
        private System.Data.DataRelation relationFK_Store_Goods;
        
        private System.Data.DataRelation relationFK_Store_Warehouses;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WMSDataSet6() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected WMSDataSet6(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Goods"] != null)) {
                    base.Tables.Add(new GoodsDataTable(ds.Tables["Goods"]));
                }
                if ((ds.Tables["Records"] != null)) {
                    base.Tables.Add(new RecordsDataTable(ds.Tables["Records"]));
                }
                if ((ds.Tables["Store"] != null)) {
                    base.Tables.Add(new StoreDataTable(ds.Tables["Store"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Warehouses"] != null)) {
                    base.Tables.Add(new WarehousesDataTable(ds.Tables["Warehouses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GoodsDataTable Goods {
            get {
                return this.tableGoods;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordsDataTable Records {
            get {
                return this.tableRecords;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StoreDataTable Store {
            get {
                return this.tableStore;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WarehousesDataTable Warehouses {
            get {
                return this.tableWarehouses;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            WMSDataSet6 cln = ((WMSDataSet6)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Goods"] != null)) {
                    base.Tables.Add(new GoodsDataTable(ds.Tables["Goods"]));
                }
                if ((ds.Tables["Records"] != null)) {
                    base.Tables.Add(new RecordsDataTable(ds.Tables["Records"]));
                }
                if ((ds.Tables["Store"] != null)) {
                    base.Tables.Add(new StoreDataTable(ds.Tables["Store"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Warehouses"] != null)) {
                    base.Tables.Add(new WarehousesDataTable(ds.Tables["Warehouses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGoods = ((GoodsDataTable)(base.Tables["Goods"]));
            if ((initTable == true)) {
                if ((this.tableGoods != null)) {
                    this.tableGoods.InitVars();
                }
            }
            this.tableRecords = ((RecordsDataTable)(base.Tables["Records"]));
            if ((initTable == true)) {
                if ((this.tableRecords != null)) {
                    this.tableRecords.InitVars();
                }
            }
            this.tableStore = ((StoreDataTable)(base.Tables["Store"]));
            if ((initTable == true)) {
                if ((this.tableStore != null)) {
                    this.tableStore.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableWarehouses = ((WarehousesDataTable)(base.Tables["Warehouses"]));
            if ((initTable == true)) {
                if ((this.tableWarehouses != null)) {
                    this.tableWarehouses.InitVars();
                }
            }
            this.relationFK_Store_Goods = this.Relations["FK_Store_Goods"];
            this.relationFK_Store_Warehouses = this.Relations["FK_Store_Warehouses"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "WMSDataSet6";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/WMSDataSet6.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGoods = new GoodsDataTable();
            base.Tables.Add(this.tableGoods);
            this.tableRecords = new RecordsDataTable();
            base.Tables.Add(this.tableRecords);
            this.tableStore = new StoreDataTable();
            base.Tables.Add(this.tableStore);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableWarehouses = new WarehousesDataTable();
            base.Tables.Add(this.tableWarehouses);
            this.relationFK_Store_Goods = new System.Data.DataRelation("FK_Store_Goods", new System.Data.DataColumn[] {
                        this.tableGoods.GIDColumn}, new System.Data.DataColumn[] {
                        this.tableStore.SGIDColumn}, false);
            this.Relations.Add(this.relationFK_Store_Goods);
            this.relationFK_Store_Warehouses = new System.Data.DataRelation("FK_Store_Warehouses", new System.Data.DataColumn[] {
                        this.tableWarehouses.WIDColumn}, new System.Data.DataColumn[] {
                        this.tableStore.SWIDColumn}, false);
            this.Relations.Add(this.relationFK_Store_Warehouses);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGoods() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecords() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStore() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWarehouses() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            WMSDataSet6 ds = new WMSDataSet6();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void GoodsRowChangeEventHandler(object sender, GoodsRowChangeEvent e);
        
        public delegate void RecordsRowChangeEventHandler(object sender, RecordsRowChangeEvent e);
        
        public delegate void StoreRowChangeEventHandler(object sender, StoreRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void WarehousesRowChangeEventHandler(object sender, WarehousesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GoodsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGID;
            
            private System.Data.DataColumn columnGName;
            
            private System.Data.DataColumn columnGPrice;
            
            private System.Data.DataColumn columnGProvider1;
            
            private System.Data.DataColumn columnGProvider2;
            
            private System.Data.DataColumn columnGDescribe;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsDataTable() {
                this.TableName = "Goods";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoodsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GoodsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GIDColumn {
                get {
                    return this.columnGID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GNameColumn {
                get {
                    return this.columnGName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GPriceColumn {
                get {
                    return this.columnGPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GProvider1Column {
                get {
                    return this.columnGProvider1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GProvider2Column {
                get {
                    return this.columnGProvider2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GDescribeColumn {
                get {
                    return this.columnGDescribe;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRow this[int index] {
                get {
                    return ((GoodsRow)(this.Rows[index]));
                }
            }
            
            public event GoodsRowChangeEventHandler GoodsRowChanging;
            
            public event GoodsRowChangeEventHandler GoodsRowChanged;
            
            public event GoodsRowChangeEventHandler GoodsRowDeleting;
            
            public event GoodsRowChangeEventHandler GoodsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGoodsRow(GoodsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRow AddGoodsRow(string GName, decimal GPrice, string GProvider1, string GProvider2, string GDescribe) {
                GoodsRow rowGoodsRow = ((GoodsRow)(this.NewRow()));
                rowGoodsRow.ItemArray = new object[] {
                        null,
                        GName,
                        GPrice,
                        GProvider1,
                        GProvider2,
                        GDescribe};
                this.Rows.Add(rowGoodsRow);
                return rowGoodsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRow FindByGID(int GID) {
                return ((GoodsRow)(this.Rows.Find(new object[] {
                            GID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GoodsDataTable cln = ((GoodsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GoodsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGID = base.Columns["GID"];
                this.columnGName = base.Columns["GName"];
                this.columnGPrice = base.Columns["GPrice"];
                this.columnGProvider1 = base.Columns["GProvider1"];
                this.columnGProvider2 = base.Columns["GProvider2"];
                this.columnGDescribe = base.Columns["GDescribe"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGID = new System.Data.DataColumn("GID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGID);
                this.columnGName = new System.Data.DataColumn("GName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGName);
                this.columnGPrice = new System.Data.DataColumn("GPrice", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGPrice);
                this.columnGProvider1 = new System.Data.DataColumn("GProvider1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGProvider1);
                this.columnGProvider2 = new System.Data.DataColumn("GProvider2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGProvider2);
                this.columnGDescribe = new System.Data.DataColumn("GDescribe", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGDescribe);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGID}, true));
                this.columnGID.AutoIncrement = true;
                this.columnGID.AllowDBNull = false;
                this.columnGID.ReadOnly = true;
                this.columnGID.Unique = true;
                this.columnGName.AllowDBNull = false;
                this.columnGName.MaxLength = 50;
                this.columnGPrice.AllowDBNull = false;
                this.columnGProvider1.AllowDBNull = false;
                this.columnGProvider1.MaxLength = 50;
                this.columnGProvider2.MaxLength = 50;
                this.columnGDescribe.MaxLength = 500;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRow NewGoodsRow() {
                return ((GoodsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GoodsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GoodsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GoodsRowChanged != null)) {
                    this.GoodsRowChanged(this, new GoodsRowChangeEvent(((GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GoodsRowChanging != null)) {
                    this.GoodsRowChanging(this, new GoodsRowChangeEvent(((GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GoodsRowDeleted != null)) {
                    this.GoodsRowDeleted(this, new GoodsRowChangeEvent(((GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GoodsRowDeleting != null)) {
                    this.GoodsRowDeleting(this, new GoodsRowChangeEvent(((GoodsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGoodsRow(GoodsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                WMSDataSet6 ds = new WMSDataSet6();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GoodsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRID;
            
            private System.Data.DataColumn columnRGID;
            
            private System.Data.DataColumn columnRWID;
            
            private System.Data.DataColumn columnRQuantity;
            
            private System.Data.DataColumn columnRType;
            
            private System.Data.DataColumn columnRManager;
            
            private System.Data.DataColumn columnRDate;
            
            private System.Data.DataColumn columnRHandler;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsDataTable() {
                this.TableName = "Records";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RIDColumn {
                get {
                    return this.columnRID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RGIDColumn {
                get {
                    return this.columnRGID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RWIDColumn {
                get {
                    return this.columnRWID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RQuantityColumn {
                get {
                    return this.columnRQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RTypeColumn {
                get {
                    return this.columnRType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RManagerColumn {
                get {
                    return this.columnRManager;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RDateColumn {
                get {
                    return this.columnRDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RHandlerColumn {
                get {
                    return this.columnRHandler;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsRow this[int index] {
                get {
                    return ((RecordsRow)(this.Rows[index]));
                }
            }
            
            public event RecordsRowChangeEventHandler RecordsRowChanging;
            
            public event RecordsRowChangeEventHandler RecordsRowChanged;
            
            public event RecordsRowChangeEventHandler RecordsRowDeleting;
            
            public event RecordsRowChangeEventHandler RecordsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordsRow(RecordsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsRow AddRecordsRow(string RGID, string RWID, double RQuantity, bool RType, string RManager, System.DateTime RDate, string RHandler) {
                RecordsRow rowRecordsRow = ((RecordsRow)(this.NewRow()));
                rowRecordsRow.ItemArray = new object[] {
                        null,
                        RGID,
                        RWID,
                        RQuantity,
                        RType,
                        RManager,
                        RDate,
                        RHandler};
                this.Rows.Add(rowRecordsRow);
                return rowRecordsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsRow FindByRID(int RID) {
                return ((RecordsRow)(this.Rows.Find(new object[] {
                            RID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecordsDataTable cln = ((RecordsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecordsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRID = base.Columns["RID"];
                this.columnRGID = base.Columns["RGID"];
                this.columnRWID = base.Columns["RWID"];
                this.columnRQuantity = base.Columns["RQuantity"];
                this.columnRType = base.Columns["RType"];
                this.columnRManager = base.Columns["RManager"];
                this.columnRDate = base.Columns["RDate"];
                this.columnRHandler = base.Columns["RHandler"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRID = new System.Data.DataColumn("RID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRID);
                this.columnRGID = new System.Data.DataColumn("RGID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRGID);
                this.columnRWID = new System.Data.DataColumn("RWID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRWID);
                this.columnRQuantity = new System.Data.DataColumn("RQuantity", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRQuantity);
                this.columnRType = new System.Data.DataColumn("RType", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRType);
                this.columnRManager = new System.Data.DataColumn("RManager", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRManager);
                this.columnRDate = new System.Data.DataColumn("RDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRDate);
                this.columnRHandler = new System.Data.DataColumn("RHandler", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRHandler);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRID}, true));
                this.columnRID.AutoIncrement = true;
                this.columnRID.AllowDBNull = false;
                this.columnRID.ReadOnly = true;
                this.columnRID.Unique = true;
                this.columnRGID.AllowDBNull = false;
                this.columnRGID.MaxLength = 50;
                this.columnRWID.AllowDBNull = false;
                this.columnRWID.MaxLength = 50;
                this.columnRQuantity.AllowDBNull = false;
                this.columnRType.AllowDBNull = false;
                this.columnRManager.AllowDBNull = false;
                this.columnRManager.MaxLength = 50;
                this.columnRDate.AllowDBNull = false;
                this.columnRHandler.AllowDBNull = false;
                this.columnRHandler.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsRow NewRecordsRow() {
                return ((RecordsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecordsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecordsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordsRowChanged != null)) {
                    this.RecordsRowChanged(this, new RecordsRowChangeEvent(((RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordsRowChanging != null)) {
                    this.RecordsRowChanging(this, new RecordsRowChangeEvent(((RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordsRowDeleted != null)) {
                    this.RecordsRowDeleted(this, new RecordsRowChangeEvent(((RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordsRowDeleting != null)) {
                    this.RecordsRowDeleting(this, new RecordsRowChangeEvent(((RecordsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordsRow(RecordsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                WMSDataSet6 ds = new WMSDataSet6();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StoreDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSID;
            
            private System.Data.DataColumn columnSGID;
            
            private System.Data.DataColumn columnSWID;
            
            private System.Data.DataColumn columnSTopLine;
            
            private System.Data.DataColumn columnSbaseLine;
            
            private System.Data.DataColumn columnSQuantity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreDataTable() {
                this.TableName = "Store";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoreDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StoreDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SIDColumn {
                get {
                    return this.columnSID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SGIDColumn {
                get {
                    return this.columnSGID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SWIDColumn {
                get {
                    return this.columnSWID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn STopLineColumn {
                get {
                    return this.columnSTopLine;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SbaseLineColumn {
                get {
                    return this.columnSbaseLine;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SQuantityColumn {
                get {
                    return this.columnSQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow this[int index] {
                get {
                    return ((StoreRow)(this.Rows[index]));
                }
            }
            
            public event StoreRowChangeEventHandler StoreRowChanging;
            
            public event StoreRowChangeEventHandler StoreRowChanged;
            
            public event StoreRowChangeEventHandler StoreRowDeleting;
            
            public event StoreRowChangeEventHandler StoreRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStoreRow(StoreRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow AddStoreRow(GoodsRow parentGoodsRowByFK_Store_Goods, WarehousesRow parentWarehousesRowByFK_Store_Warehouses, double STopLine, double SbaseLine, double SQuantity) {
                StoreRow rowStoreRow = ((StoreRow)(this.NewRow()));
                rowStoreRow.ItemArray = new object[] {
                        null,
                        parentGoodsRowByFK_Store_Goods[0],
                        parentWarehousesRowByFK_Store_Warehouses[0],
                        STopLine,
                        SbaseLine,
                        SQuantity};
                this.Rows.Add(rowStoreRow);
                return rowStoreRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow FindBySID(int SID) {
                return ((StoreRow)(this.Rows.Find(new object[] {
                            SID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StoreDataTable cln = ((StoreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StoreDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSID = base.Columns["SID"];
                this.columnSGID = base.Columns["SGID"];
                this.columnSWID = base.Columns["SWID"];
                this.columnSTopLine = base.Columns["STopLine"];
                this.columnSbaseLine = base.Columns["SbaseLine"];
                this.columnSQuantity = base.Columns["SQuantity"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSID = new System.Data.DataColumn("SID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSID);
                this.columnSGID = new System.Data.DataColumn("SGID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSGID);
                this.columnSWID = new System.Data.DataColumn("SWID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSWID);
                this.columnSTopLine = new System.Data.DataColumn("STopLine", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTopLine);
                this.columnSbaseLine = new System.Data.DataColumn("SbaseLine", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSbaseLine);
                this.columnSQuantity = new System.Data.DataColumn("SQuantity", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSQuantity);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSID}, true));
                this.columnSID.AutoIncrement = true;
                this.columnSID.AllowDBNull = false;
                this.columnSID.ReadOnly = true;
                this.columnSID.Unique = true;
                this.columnSGID.AllowDBNull = false;
                this.columnSWID.AllowDBNull = false;
                this.columnSTopLine.AllowDBNull = false;
                this.columnSbaseLine.AllowDBNull = false;
                this.columnSQuantity.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow NewStoreRow() {
                return ((StoreRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StoreRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StoreRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StoreRowChanged != null)) {
                    this.StoreRowChanged(this, new StoreRowChangeEvent(((StoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StoreRowChanging != null)) {
                    this.StoreRowChanging(this, new StoreRowChangeEvent(((StoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StoreRowDeleted != null)) {
                    this.StoreRowDeleted(this, new StoreRowChangeEvent(((StoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StoreRowDeleting != null)) {
                    this.StoreRowDeleting(this, new StoreRowChangeEvent(((StoreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStoreRow(StoreRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                WMSDataSet6 ds = new WMSDataSet6();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StoreDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUID;
            
            private System.Data.DataColumn columnUPassword;
            
            private System.Data.DataColumn columnUPower;
            
            private System.Data.DataColumn columnUName;
            
            private System.Data.DataColumn columnUSex;
            
            private System.Data.DataColumn columnUTel;
            
            private System.Data.DataColumn columnUAdress;
            
            private System.Data.DataColumn columnUDep;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UPasswordColumn {
                get {
                    return this.columnUPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UPowerColumn {
                get {
                    return this.columnUPower;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UNameColumn {
                get {
                    return this.columnUName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn USexColumn {
                get {
                    return this.columnUSex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UTelColumn {
                get {
                    return this.columnUTel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UAdressColumn {
                get {
                    return this.columnUAdress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UDepColumn {
                get {
                    return this.columnUDep;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow AddUsersRow(string UID, string UPassword, string UPower, string UName, string USex, string UTel, string UAdress, string UDep) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        UID,
                        UPassword,
                        UPower,
                        UName,
                        USex,
                        UTel,
                        UAdress,
                        UDep};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow FindByUID(string UID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            UID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUID = base.Columns["UID"];
                this.columnUPassword = base.Columns["UPassword"];
                this.columnUPower = base.Columns["UPower"];
                this.columnUName = base.Columns["UName"];
                this.columnUSex = base.Columns["USex"];
                this.columnUTel = base.Columns["UTel"];
                this.columnUAdress = base.Columns["UAdress"];
                this.columnUDep = base.Columns["UDep"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUID = new System.Data.DataColumn("UID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUID);
                this.columnUPassword = new System.Data.DataColumn("UPassword", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPassword);
                this.columnUPower = new System.Data.DataColumn("UPower", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPower);
                this.columnUName = new System.Data.DataColumn("UName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUName);
                this.columnUSex = new System.Data.DataColumn("USex", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSex);
                this.columnUTel = new System.Data.DataColumn("UTel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUTel);
                this.columnUAdress = new System.Data.DataColumn("UAdress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUAdress);
                this.columnUDep = new System.Data.DataColumn("UDep", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUDep);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUID}, true));
                this.columnUID.AllowDBNull = false;
                this.columnUID.Unique = true;
                this.columnUID.MaxLength = 50;
                this.columnUPassword.AllowDBNull = false;
                this.columnUPassword.MaxLength = 50;
                this.columnUPower.AllowDBNull = false;
                this.columnUPower.MaxLength = 50;
                this.columnUName.AllowDBNull = false;
                this.columnUName.MaxLength = 50;
                this.columnUSex.AllowDBNull = false;
                this.columnUSex.MaxLength = 10;
                this.columnUTel.AllowDBNull = false;
                this.columnUTel.MaxLength = 50;
                this.columnUAdress.AllowDBNull = false;
                this.columnUAdress.MaxLength = 50;
                this.columnUDep.AllowDBNull = false;
                this.columnUDep.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                WMSDataSet6 ds = new WMSDataSet6();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WarehousesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnWID;
            
            private System.Data.DataColumn columnWName;
            
            private System.Data.DataColumn columnWArea;
            
            private System.Data.DataColumn columnWAddress;
            
            private System.Data.DataColumn columnWDescribe;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesDataTable() {
                this.TableName = "Warehouses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WarehousesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WarehousesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WIDColumn {
                get {
                    return this.columnWID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WNameColumn {
                get {
                    return this.columnWName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WAreaColumn {
                get {
                    return this.columnWArea;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WAddressColumn {
                get {
                    return this.columnWAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WDescribeColumn {
                get {
                    return this.columnWDescribe;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRow this[int index] {
                get {
                    return ((WarehousesRow)(this.Rows[index]));
                }
            }
            
            public event WarehousesRowChangeEventHandler WarehousesRowChanging;
            
            public event WarehousesRowChangeEventHandler WarehousesRowChanged;
            
            public event WarehousesRowChangeEventHandler WarehousesRowDeleting;
            
            public event WarehousesRowChangeEventHandler WarehousesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWarehousesRow(WarehousesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRow AddWarehousesRow(string WName, double WArea, string WAddress, string WDescribe) {
                WarehousesRow rowWarehousesRow = ((WarehousesRow)(this.NewRow()));
                rowWarehousesRow.ItemArray = new object[] {
                        null,
                        WName,
                        WArea,
                        WAddress,
                        WDescribe};
                this.Rows.Add(rowWarehousesRow);
                return rowWarehousesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRow FindByWID(int WID) {
                return ((WarehousesRow)(this.Rows.Find(new object[] {
                            WID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                WarehousesDataTable cln = ((WarehousesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new WarehousesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWID = base.Columns["WID"];
                this.columnWName = base.Columns["WName"];
                this.columnWArea = base.Columns["WArea"];
                this.columnWAddress = base.Columns["WAddress"];
                this.columnWDescribe = base.Columns["WDescribe"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWID = new System.Data.DataColumn("WID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWID);
                this.columnWName = new System.Data.DataColumn("WName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWName);
                this.columnWArea = new System.Data.DataColumn("WArea", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWArea);
                this.columnWAddress = new System.Data.DataColumn("WAddress", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAddress);
                this.columnWDescribe = new System.Data.DataColumn("WDescribe", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWDescribe);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnWID}, true));
                this.columnWID.AutoIncrement = true;
                this.columnWID.AllowDBNull = false;
                this.columnWID.ReadOnly = true;
                this.columnWID.Unique = true;
                this.columnWName.AllowDBNull = false;
                this.columnWName.MaxLength = 50;
                this.columnWArea.AllowDBNull = false;
                this.columnWAddress.AllowDBNull = false;
                this.columnWAddress.MaxLength = 500;
                this.columnWDescribe.AllowDBNull = false;
                this.columnWDescribe.MaxLength = 500;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRow NewWarehousesRow() {
                return ((WarehousesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new WarehousesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(WarehousesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WarehousesRowChanged != null)) {
                    this.WarehousesRowChanged(this, new WarehousesRowChangeEvent(((WarehousesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WarehousesRowChanging != null)) {
                    this.WarehousesRowChanging(this, new WarehousesRowChangeEvent(((WarehousesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WarehousesRowDeleted != null)) {
                    this.WarehousesRowDeleted(this, new WarehousesRowChangeEvent(((WarehousesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WarehousesRowDeleting != null)) {
                    this.WarehousesRowDeleting(this, new WarehousesRowChangeEvent(((WarehousesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWarehousesRow(WarehousesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                WMSDataSet6 ds = new WMSDataSet6();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WarehousesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GoodsRow : System.Data.DataRow {
            
            private GoodsDataTable tableGoods;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GoodsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGoods = ((GoodsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GID {
                get {
                    return ((int)(this[this.tableGoods.GIDColumn]));
                }
                set {
                    this[this.tableGoods.GIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GName {
                get {
                    return ((string)(this[this.tableGoods.GNameColumn]));
                }
                set {
                    this[this.tableGoods.GNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GPrice {
                get {
                    return ((decimal)(this[this.tableGoods.GPriceColumn]));
                }
                set {
                    this[this.tableGoods.GPriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GProvider1 {
                get {
                    return ((string)(this[this.tableGoods.GProvider1Column]));
                }
                set {
                    this[this.tableGoods.GProvider1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GProvider2 {
                get {
                    try {
                        return ((string)(this[this.tableGoods.GProvider2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“Goods”中列“GProvider2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGoods.GProvider2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GDescribe {
                get {
                    try {
                        return ((string)(this[this.tableGoods.GDescribeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“Goods”中列“GDescribe”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableGoods.GDescribeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGProvider2Null() {
                return this.IsNull(this.tableGoods.GProvider2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGProvider2Null() {
                this[this.tableGoods.GProvider2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGDescribeNull() {
                return this.IsNull(this.tableGoods.GDescribeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGDescribeNull() {
                this[this.tableGoods.GDescribeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow[] GetStoreRows() {
                return ((StoreRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Store_Goods"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordsRow : System.Data.DataRow {
            
            private RecordsDataTable tableRecords;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecords = ((RecordsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RID {
                get {
                    return ((int)(this[this.tableRecords.RIDColumn]));
                }
                set {
                    this[this.tableRecords.RIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RGID {
                get {
                    return ((string)(this[this.tableRecords.RGIDColumn]));
                }
                set {
                    this[this.tableRecords.RGIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RWID {
                get {
                    return ((string)(this[this.tableRecords.RWIDColumn]));
                }
                set {
                    this[this.tableRecords.RWIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RQuantity {
                get {
                    return ((double)(this[this.tableRecords.RQuantityColumn]));
                }
                set {
                    this[this.tableRecords.RQuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RType {
                get {
                    return ((bool)(this[this.tableRecords.RTypeColumn]));
                }
                set {
                    this[this.tableRecords.RTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RManager {
                get {
                    return ((string)(this[this.tableRecords.RManagerColumn]));
                }
                set {
                    this[this.tableRecords.RManagerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RDate {
                get {
                    return ((System.DateTime)(this[this.tableRecords.RDateColumn]));
                }
                set {
                    this[this.tableRecords.RDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RHandler {
                get {
                    return ((string)(this[this.tableRecords.RHandlerColumn]));
                }
                set {
                    this[this.tableRecords.RHandlerColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StoreRow : System.Data.DataRow {
            
            private StoreDataTable tableStore;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StoreRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStore = ((StoreDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SID {
                get {
                    return ((int)(this[this.tableStore.SIDColumn]));
                }
                set {
                    this[this.tableStore.SIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SGID {
                get {
                    return ((int)(this[this.tableStore.SGIDColumn]));
                }
                set {
                    this[this.tableStore.SGIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SWID {
                get {
                    return ((int)(this[this.tableStore.SWIDColumn]));
                }
                set {
                    this[this.tableStore.SWIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double STopLine {
                get {
                    return ((double)(this[this.tableStore.STopLineColumn]));
                }
                set {
                    this[this.tableStore.STopLineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SbaseLine {
                get {
                    return ((double)(this[this.tableStore.SbaseLineColumn]));
                }
                set {
                    this[this.tableStore.SbaseLineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SQuantity {
                get {
                    return ((double)(this[this.tableStore.SQuantityColumn]));
                }
                set {
                    this[this.tableStore.SQuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRow GoodsRow {
                get {
                    return ((GoodsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Store_Goods"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Store_Goods"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRow WarehousesRow {
                get {
                    return ((WarehousesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Store_Warehouses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Store_Warehouses"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UsersRow : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UID {
                get {
                    return ((string)(this[this.tableUsers.UIDColumn]));
                }
                set {
                    this[this.tableUsers.UIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPassword {
                get {
                    return ((string)(this[this.tableUsers.UPasswordColumn]));
                }
                set {
                    this[this.tableUsers.UPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPower {
                get {
                    return ((string)(this[this.tableUsers.UPowerColumn]));
                }
                set {
                    this[this.tableUsers.UPowerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UName {
                get {
                    return ((string)(this[this.tableUsers.UNameColumn]));
                }
                set {
                    this[this.tableUsers.UNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USex {
                get {
                    return ((string)(this[this.tableUsers.USexColumn]));
                }
                set {
                    this[this.tableUsers.USexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UTel {
                get {
                    return ((string)(this[this.tableUsers.UTelColumn]));
                }
                set {
                    this[this.tableUsers.UTelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UAdress {
                get {
                    return ((string)(this[this.tableUsers.UAdressColumn]));
                }
                set {
                    this[this.tableUsers.UAdressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UDep {
                get {
                    return ((string)(this[this.tableUsers.UDepColumn]));
                }
                set {
                    this[this.tableUsers.UDepColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WarehousesRow : System.Data.DataRow {
            
            private WarehousesDataTable tableWarehouses;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WarehousesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWarehouses = ((WarehousesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WID {
                get {
                    return ((int)(this[this.tableWarehouses.WIDColumn]));
                }
                set {
                    this[this.tableWarehouses.WIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WName {
                get {
                    return ((string)(this[this.tableWarehouses.WNameColumn]));
                }
                set {
                    this[this.tableWarehouses.WNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double WArea {
                get {
                    return ((double)(this[this.tableWarehouses.WAreaColumn]));
                }
                set {
                    this[this.tableWarehouses.WAreaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAddress {
                get {
                    return ((string)(this[this.tableWarehouses.WAddressColumn]));
                }
                set {
                    this[this.tableWarehouses.WAddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WDescribe {
                get {
                    return ((string)(this[this.tableWarehouses.WDescribeColumn]));
                }
                set {
                    this[this.tableWarehouses.WDescribeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow[] GetStoreRows() {
                return ((StoreRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Store_Warehouses"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GoodsRowChangeEvent : System.EventArgs {
            
            private GoodsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRowChangeEvent(GoodsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GoodsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordsRowChangeEvent : System.EventArgs {
            
            private RecordsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsRowChangeEvent(RecordsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StoreRowChangeEvent : System.EventArgs {
            
            private StoreRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRowChangeEvent(StoreRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StoreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UsersRowChangeEvent : System.EventArgs {
            
            private UsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRowChangeEvent(UsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WarehousesRowChangeEvent : System.EventArgs {
            
            private WarehousesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRowChangeEvent(WarehousesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WarehousesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace cangku.WMSDataSet6TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GoodsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GoodsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Goods";
            tableMapping.ColumnMappings.Add("GID", "GID");
            tableMapping.ColumnMappings.Add("GName", "GName");
            tableMapping.ColumnMappings.Add("GPrice", "GPrice");
            tableMapping.ColumnMappings.Add("GProvider1", "GProvider1");
            tableMapping.ColumnMappings.Add("GProvider2", "GProvider2");
            tableMapping.ColumnMappings.Add("GDescribe", "GDescribe");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Goods] WHERE (([GID] = @Original_GID) AND ([GName] = @Original_GName) AND ([GPrice] = @Original_GPrice) AND ([GProvider1] = @Original_GProvider1) AND ((@IsNull_GProvider2 = 1 AND [GProvider2] IS NULL) OR ([GProvider2] = @Original_GProvider2)) AND ((@IsNull_GDescribe = 1 AND [GDescribe] IS NULL) OR ([GDescribe] = @Original_GDescribe)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "GPrice", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GProvider1", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider1", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_GProvider2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider2", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GProvider2", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_GDescribe", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GDescribe", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GDescribe", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Goods] ([GName], [GPrice], [GProvider1], [GProvider2], [GDescr" +
                "ibe]) VALUES (@GName, @GPrice, @GProvider1, @GProvider2, @GDescribe);\r\nSELECT GI" +
                "D, GName, GPrice, GProvider1, GProvider2, GDescribe FROM Goods WHERE (GID = SCOP" +
                "E_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "GPrice", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GProvider1", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GProvider2", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GDescribe", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Goods] SET [GName] = @GName, [GPrice] = @GPrice, [GProvider1] = @GProvider1, [GProvider2] = @GProvider2, [GDescribe] = @GDescribe WHERE (([GID] = @Original_GID) AND ([GName] = @Original_GName) AND ([GPrice] = @Original_GPrice) AND ([GProvider1] = @Original_GProvider1) AND ((@IsNull_GProvider2 = 1 AND [GProvider2] IS NULL) OR ([GProvider2] = @Original_GProvider2)) AND ((@IsNull_GDescribe = 1 AND [GDescribe] IS NULL) OR ([GDescribe] = @Original_GDescribe)));
SELECT GID, GName, GPrice, GProvider1, GProvider2, GDescribe FROM Goods WHERE (GID = @GID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "GPrice", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GProvider1", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider1", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GProvider2", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider2", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GDescribe", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GPrice", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "GPrice", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GProvider1", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider1", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_GProvider2", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider2", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GProvider2", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GProvider2", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_GDescribe", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GDescribe", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "GDescribe", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "GID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cangku.Properties.Settings.Default.WMSConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT GID, GName, GPrice, GProvider1, GProvider2, GDescribe FROM dbo.Goods";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(WMSDataSet6.GoodsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual WMSDataSet6.GoodsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            WMSDataSet6.GoodsDataTable dataTable = new WMSDataSet6.GoodsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6.GoodsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6 dataSet) {
            return this.Adapter.Update(dataSet, "Goods");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_GID, string Original_GName, decimal Original_GPrice, string Original_GProvider1, string Original_GProvider2, string Original_GDescribe) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_GID));
            if ((Original_GName == null)) {
                throw new System.ArgumentNullException("Original_GName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_GName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_GPrice));
            if ((Original_GProvider1 == null)) {
                throw new System.ArgumentNullException("Original_GProvider1");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_GProvider1));
            }
            if ((Original_GProvider2 == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_GProvider2));
            }
            if ((Original_GDescribe == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_GDescribe));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string GName, decimal GPrice, string GProvider1, string GProvider2, string GDescribe) {
            if ((GName == null)) {
                throw new System.ArgumentNullException("GName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(GName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(GPrice));
            if ((GProvider1 == null)) {
                throw new System.ArgumentNullException("GProvider1");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(GProvider1));
            }
            if ((GProvider2 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(GProvider2));
            }
            if ((GDescribe == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(GDescribe));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string GName, decimal GPrice, string GProvider1, string GProvider2, string GDescribe, int Original_GID, string Original_GName, decimal Original_GPrice, string Original_GProvider1, string Original_GProvider2, string Original_GDescribe, int GID) {
            if ((GName == null)) {
                throw new System.ArgumentNullException("GName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(GName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(GPrice));
            if ((GProvider1 == null)) {
                throw new System.ArgumentNullException("GProvider1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(GProvider1));
            }
            if ((GProvider2 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(GProvider2));
            }
            if ((GDescribe == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(GDescribe));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_GID));
            if ((Original_GName == null)) {
                throw new System.ArgumentNullException("Original_GName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_GName));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_GPrice));
            if ((Original_GProvider1 == null)) {
                throw new System.ArgumentNullException("Original_GProvider1");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_GProvider1));
            }
            if ((Original_GProvider2 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_GProvider2));
            }
            if ((Original_GDescribe == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_GDescribe));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(GID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RecordsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RecordsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Records";
            tableMapping.ColumnMappings.Add("RID", "RID");
            tableMapping.ColumnMappings.Add("RGID", "RGID");
            tableMapping.ColumnMappings.Add("RWID", "RWID");
            tableMapping.ColumnMappings.Add("RQuantity", "RQuantity");
            tableMapping.ColumnMappings.Add("RType", "RType");
            tableMapping.ColumnMappings.Add("RManager", "RManager");
            tableMapping.ColumnMappings.Add("RDate", "RDate");
            tableMapping.ColumnMappings.Add("RHandler", "RHandler");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Records] WHERE (([RID] = @Original_RID) AND ([RGID] = @Original_RGID) AND ([RWID] = @Original_RWID) AND ([RQuantity] = @Original_RQuantity) AND ([RType] = @Original_RType) AND ([RManager] = @Original_RManager) AND ([RDate] = @Original_RDate) AND ([RHandler] = @Original_RHandler))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RGID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RGID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RWID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RWID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "RQuantity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RType", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RManager", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RManager", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RHandler", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RHandler", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Records] ([RGID], [RWID], [RQuantity], [RType], [RManager], [RDate], [RHandler]) VALUES (@RGID, @RWID, @RQuantity, @RType, @RManager, @RDate, @RHandler);
SELECT RID, RGID, RWID, RQuantity, RType, RManager, RDate, RHandler FROM Records WHERE (RID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RGID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RGID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RWID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RWID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "RQuantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RType", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RManager", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RManager", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RHandler", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RHandler", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Records] SET [RGID] = @RGID, [RWID] = @RWID, [RQuantity] = @RQuantity, [RType] = @RType, [RManager] = @RManager, [RDate] = @RDate, [RHandler] = @RHandler WHERE (([RID] = @Original_RID) AND ([RGID] = @Original_RGID) AND ([RWID] = @Original_RWID) AND ([RQuantity] = @Original_RQuantity) AND ([RType] = @Original_RType) AND ([RManager] = @Original_RManager) AND ([RDate] = @Original_RDate) AND ([RHandler] = @Original_RHandler));
SELECT RID, RGID, RWID, RQuantity, RType, RManager, RDate, RHandler FROM Records WHERE (RID = @RID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RGID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RGID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RWID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RWID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "RQuantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RType", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RManager", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RManager", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RHandler", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RHandler", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "RID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RGID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RGID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RWID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RWID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "RQuantity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RType", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "RType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RManager", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RManager", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RHandler", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RHandler", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "RID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cangku.Properties.Settings.Default.WMSConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RID, RGID, RWID, RQuantity, RType, RManager, RDate, RHandler FROM dbo.Reco" +
                "rds";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(WMSDataSet6.RecordsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual WMSDataSet6.RecordsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            WMSDataSet6.RecordsDataTable dataTable = new WMSDataSet6.RecordsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6.RecordsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6 dataSet) {
            return this.Adapter.Update(dataSet, "Records");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_RID, string Original_RGID, string Original_RWID, double Original_RQuantity, bool Original_RType, string Original_RManager, System.DateTime Original_RDate, string Original_RHandler) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_RID));
            if ((Original_RGID == null)) {
                throw new System.ArgumentNullException("Original_RGID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_RGID));
            }
            if ((Original_RWID == null)) {
                throw new System.ArgumentNullException("Original_RWID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_RWID));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_RQuantity));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_RType));
            if ((Original_RManager == null)) {
                throw new System.ArgumentNullException("Original_RManager");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_RManager));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_RDate));
            if ((Original_RHandler == null)) {
                throw new System.ArgumentNullException("Original_RHandler");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_RHandler));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RGID, string RWID, double RQuantity, bool RType, string RManager, System.DateTime RDate, string RHandler) {
            if ((RGID == null)) {
                throw new System.ArgumentNullException("RGID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RGID));
            }
            if ((RWID == null)) {
                throw new System.ArgumentNullException("RWID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(RWID));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(RQuantity));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(RType));
            if ((RManager == null)) {
                throw new System.ArgumentNullException("RManager");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(RManager));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(RDate));
            if ((RHandler == null)) {
                throw new System.ArgumentNullException("RHandler");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(RHandler));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RGID, 
                    string RWID, 
                    double RQuantity, 
                    bool RType, 
                    string RManager, 
                    System.DateTime RDate, 
                    string RHandler, 
                    int Original_RID, 
                    string Original_RGID, 
                    string Original_RWID, 
                    double Original_RQuantity, 
                    bool Original_RType, 
                    string Original_RManager, 
                    System.DateTime Original_RDate, 
                    string Original_RHandler, 
                    int RID) {
            if ((RGID == null)) {
                throw new System.ArgumentNullException("RGID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RGID));
            }
            if ((RWID == null)) {
                throw new System.ArgumentNullException("RWID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(RWID));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(RQuantity));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(RType));
            if ((RManager == null)) {
                throw new System.ArgumentNullException("RManager");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(RManager));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(RDate));
            if ((RHandler == null)) {
                throw new System.ArgumentNullException("RHandler");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(RHandler));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_RID));
            if ((Original_RGID == null)) {
                throw new System.ArgumentNullException("Original_RGID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_RGID));
            }
            if ((Original_RWID == null)) {
                throw new System.ArgumentNullException("Original_RWID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_RWID));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_RQuantity));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_RType));
            if ((Original_RManager == null)) {
                throw new System.ArgumentNullException("Original_RManager");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_RManager));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_RDate));
            if ((Original_RHandler == null)) {
                throw new System.ArgumentNullException("Original_RHandler");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_RHandler));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(RID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StoreTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StoreTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Store";
            tableMapping.ColumnMappings.Add("SID", "SID");
            tableMapping.ColumnMappings.Add("SGID", "SGID");
            tableMapping.ColumnMappings.Add("SWID", "SWID");
            tableMapping.ColumnMappings.Add("STopLine", "STopLine");
            tableMapping.ColumnMappings.Add("SbaseLine", "SbaseLine");
            tableMapping.ColumnMappings.Add("SQuantity", "SQuantity");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Store] WHERE (([SID] = @Original_SID) AND ([SGID] = @Original_" +
                "SGID) AND ([SWID] = @Original_SWID) AND ([STopLine] = @Original_STopLine) AND ([" +
                "SbaseLine] = @Original_SbaseLine) AND ([SQuantity] = @Original_SQuantity))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SGID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SGID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SWID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SWID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STopLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "STopLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SbaseLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SbaseLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SQuantity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Store] ([SGID], [SWID], [STopLine], [SbaseLine], [SQuantity]) " +
                "VALUES (@SGID, @SWID, @STopLine, @SbaseLine, @SQuantity);\r\nSELECT SID, SGID, SWI" +
                "D, STopLine, SbaseLine, SQuantity FROM Store WHERE (SID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SGID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SGID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SWID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SWID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STopLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "STopLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SbaseLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SbaseLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SQuantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Store] SET [SGID] = @SGID, [SWID] = @SWID, [STopLine] = @STopLine, [SbaseLine] = @SbaseLine, [SQuantity] = @SQuantity WHERE (([SID] = @Original_SID) AND ([SGID] = @Original_SGID) AND ([SWID] = @Original_SWID) AND ([STopLine] = @Original_STopLine) AND ([SbaseLine] = @Original_SbaseLine) AND ([SQuantity] = @Original_SQuantity));
SELECT SID, SGID, SWID, STopLine, SbaseLine, SQuantity FROM Store WHERE (SID = @SID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SGID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SGID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SWID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SWID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@STopLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "STopLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SbaseLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SbaseLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SQuantity", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SGID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SGID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SWID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SWID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_STopLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "STopLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SbaseLine", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SbaseLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SQuantity", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "SQuantity", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cangku.Properties.Settings.Default.WMSConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SID, SGID, SWID, STopLine, SbaseLine, SQuantity FROM dbo.Store";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(WMSDataSet6.StoreDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual WMSDataSet6.StoreDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            WMSDataSet6.StoreDataTable dataTable = new WMSDataSet6.StoreDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6.StoreDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6 dataSet) {
            return this.Adapter.Update(dataSet, "Store");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SID, int Original_SGID, int Original_SWID, double Original_STopLine, double Original_SbaseLine, double Original_SQuantity) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SGID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_SWID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((double)(Original_STopLine));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_SbaseLine));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_SQuantity));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SGID, int SWID, double STopLine, double SbaseLine, double SQuantity) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SGID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SWID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(STopLine));
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(SbaseLine));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(SQuantity));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SGID, int SWID, double STopLine, double SbaseLine, double SQuantity, int Original_SID, int Original_SGID, int Original_SWID, double Original_STopLine, double Original_SbaseLine, double Original_SQuantity, int SID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SGID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SWID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(STopLine));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(SbaseLine));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(SQuantity));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_SID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_SGID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_SWID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(Original_STopLine));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(Original_SbaseLine));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Original_SQuantity));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(SID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UsersTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UsersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Users";
            tableMapping.ColumnMappings.Add("UID", "UID");
            tableMapping.ColumnMappings.Add("UPassword", "UPassword");
            tableMapping.ColumnMappings.Add("UPower", "UPower");
            tableMapping.ColumnMappings.Add("UName", "UName");
            tableMapping.ColumnMappings.Add("USex", "USex");
            tableMapping.ColumnMappings.Add("UTel", "UTel");
            tableMapping.ColumnMappings.Add("UAdress", "UAdress");
            tableMapping.ColumnMappings.Add("UDep", "UDep");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Users] WHERE (([UID] = @Original_UID) AND ([UPassword] = @Original_UPassword) AND ([UPower] = @Original_UPower) AND ([UName] = @Original_UName) AND ([USex] = @Original_USex) AND ([UTel] = @Original_UTel) AND ([UAdress] = @Original_UAdress) AND ([UDep] = @Original_UDep))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UPassword", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPassword", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UPower", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPower", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_USex", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "USex", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UTel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UTel", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UAdress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UAdress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UDep", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UDep", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Users] ([UID], [UPassword], [UPower], [UName], [USex], [UTel], [UAdress], [UDep]) VALUES (@UID, @UPassword, @UPower, @UName, @USex, @UTel, @UAdress, @UDep);
SELECT UID, UPassword, UPower, UName, USex, UTel, UAdress, UDep FROM Users WHERE (UID = @UID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UPassword", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPassword", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UPower", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPower", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@USex", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "USex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UTel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UTel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UAdress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UAdress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UDep", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UDep", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Users] SET [UID] = @UID, [UPassword] = @UPassword, [UPower] = @UPower, [UName] = @UName, [USex] = @USex, [UTel] = @UTel, [UAdress] = @UAdress, [UDep] = @UDep WHERE (([UID] = @Original_UID) AND ([UPassword] = @Original_UPassword) AND ([UPower] = @Original_UPower) AND ([UName] = @Original_UName) AND ([USex] = @Original_USex) AND ([UTel] = @Original_UTel) AND ([UAdress] = @Original_UAdress) AND ([UDep] = @Original_UDep));
SELECT UID, UPassword, UPower, UName, USex, UTel, UAdress, UDep FROM Users WHERE (UID = @UID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UPassword", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPassword", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UPower", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPower", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@USex", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "USex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UTel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UTel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UAdress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UAdress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UDep", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UDep", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UID", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UPassword", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPassword", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UPower", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UPower", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_USex", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "USex", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UTel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UTel", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UAdress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UAdress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UDep", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UDep", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cangku.Properties.Settings.Default.WMSConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UID, UPassword, UPower, UName, USex, UTel, UAdress, UDep FROM dbo.Users";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(WMSDataSet6.UsersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual WMSDataSet6.UsersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            WMSDataSet6.UsersDataTable dataTable = new WMSDataSet6.UsersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6.UsersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6 dataSet) {
            return this.Adapter.Update(dataSet, "Users");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_UID, string Original_UPassword, string Original_UPower, string Original_UName, string Original_USex, string Original_UTel, string Original_UAdress, string Original_UDep) {
            if ((Original_UID == null)) {
                throw new System.ArgumentNullException("Original_UID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_UID));
            }
            if ((Original_UPassword == null)) {
                throw new System.ArgumentNullException("Original_UPassword");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UPassword));
            }
            if ((Original_UPower == null)) {
                throw new System.ArgumentNullException("Original_UPower");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_UPower));
            }
            if ((Original_UName == null)) {
                throw new System.ArgumentNullException("Original_UName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_UName));
            }
            if ((Original_USex == null)) {
                throw new System.ArgumentNullException("Original_USex");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_USex));
            }
            if ((Original_UTel == null)) {
                throw new System.ArgumentNullException("Original_UTel");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_UTel));
            }
            if ((Original_UAdress == null)) {
                throw new System.ArgumentNullException("Original_UAdress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_UAdress));
            }
            if ((Original_UDep == null)) {
                throw new System.ArgumentNullException("Original_UDep");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_UDep));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string UID, string UPassword, string UPower, string UName, string USex, string UTel, string UAdress, string UDep) {
            if ((UID == null)) {
                throw new System.ArgumentNullException("UID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UID));
            }
            if ((UPassword == null)) {
                throw new System.ArgumentNullException("UPassword");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UPassword));
            }
            if ((UPower == null)) {
                throw new System.ArgumentNullException("UPower");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(UPower));
            }
            if ((UName == null)) {
                throw new System.ArgumentNullException("UName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(UName));
            }
            if ((USex == null)) {
                throw new System.ArgumentNullException("USex");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(USex));
            }
            if ((UTel == null)) {
                throw new System.ArgumentNullException("UTel");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UTel));
            }
            if ((UAdress == null)) {
                throw new System.ArgumentNullException("UAdress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(UAdress));
            }
            if ((UDep == null)) {
                throw new System.ArgumentNullException("UDep");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(UDep));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UID, 
                    string UPassword, 
                    string UPower, 
                    string UName, 
                    string USex, 
                    string UTel, 
                    string UAdress, 
                    string UDep, 
                    string Original_UID, 
                    string Original_UPassword, 
                    string Original_UPower, 
                    string Original_UName, 
                    string Original_USex, 
                    string Original_UTel, 
                    string Original_UAdress, 
                    string Original_UDep) {
            if ((UID == null)) {
                throw new System.ArgumentNullException("UID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UID));
            }
            if ((UPassword == null)) {
                throw new System.ArgumentNullException("UPassword");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UPassword));
            }
            if ((UPower == null)) {
                throw new System.ArgumentNullException("UPower");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(UPower));
            }
            if ((UName == null)) {
                throw new System.ArgumentNullException("UName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(UName));
            }
            if ((USex == null)) {
                throw new System.ArgumentNullException("USex");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(USex));
            }
            if ((UTel == null)) {
                throw new System.ArgumentNullException("UTel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UTel));
            }
            if ((UAdress == null)) {
                throw new System.ArgumentNullException("UAdress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(UAdress));
            }
            if ((UDep == null)) {
                throw new System.ArgumentNullException("UDep");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(UDep));
            }
            if ((Original_UID == null)) {
                throw new System.ArgumentNullException("Original_UID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_UID));
            }
            if ((Original_UPassword == null)) {
                throw new System.ArgumentNullException("Original_UPassword");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_UPassword));
            }
            if ((Original_UPower == null)) {
                throw new System.ArgumentNullException("Original_UPower");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_UPower));
            }
            if ((Original_UName == null)) {
                throw new System.ArgumentNullException("Original_UName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_UName));
            }
            if ((Original_USex == null)) {
                throw new System.ArgumentNullException("Original_USex");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_USex));
            }
            if ((Original_UTel == null)) {
                throw new System.ArgumentNullException("Original_UTel");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_UTel));
            }
            if ((Original_UAdress == null)) {
                throw new System.ArgumentNullException("Original_UAdress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_UAdress));
            }
            if ((Original_UDep == null)) {
                throw new System.ArgumentNullException("Original_UDep");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_UDep));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WarehousesTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public WarehousesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Warehouses";
            tableMapping.ColumnMappings.Add("WID", "WID");
            tableMapping.ColumnMappings.Add("WName", "WName");
            tableMapping.ColumnMappings.Add("WArea", "WArea");
            tableMapping.ColumnMappings.Add("WAddress", "WAddress");
            tableMapping.ColumnMappings.Add("WDescribe", "WDescribe");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Warehouses] WHERE (([WID] = @Original_WID) AND ([WName] = @Ori" +
                "ginal_WName) AND ([WArea] = @Original_WArea) AND ([WAddress] = @Original_WAddres" +
                "s) AND ([WDescribe] = @Original_WDescribe))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WArea", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "WArea", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WAddress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WDescribe", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Warehouses] ([WName], [WArea], [WAddress], [WDescribe]) VALUES" +
                " (@WName, @WArea, @WAddress, @WDescribe);\r\nSELECT WID, WName, WArea, WAddress, W" +
                "Describe FROM Warehouses WHERE (WID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WArea", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "WArea", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WDescribe", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Warehouses] SET [WName] = @WName, [WArea] = @WArea, [WAddress] = @WAddress, [WDescribe] = @WDescribe WHERE (([WID] = @Original_WID) AND ([WName] = @Original_WName) AND ([WArea] = @Original_WArea) AND ([WAddress] = @Original_WAddress) AND ([WDescribe] = @Original_WDescribe));
SELECT WID, WName, WArea, WAddress, WDescribe FROM Warehouses WHERE (WID = @WID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WArea", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "WArea", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WAddress", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WDescribe", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "WID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WArea", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "WArea", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WAddress", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WAddress", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_WDescribe", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "WDescribe", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@WID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "WID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::cangku.Properties.Settings.Default.WMSConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT WID, WName, WArea, WAddress, WDescribe FROM dbo.Warehouses";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(WMSDataSet6.WarehousesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual WMSDataSet6.WarehousesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            WMSDataSet6.WarehousesDataTable dataTable = new WMSDataSet6.WarehousesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6.WarehousesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(WMSDataSet6 dataSet) {
            return this.Adapter.Update(dataSet, "Warehouses");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_WID, string Original_WName, double Original_WArea, string Original_WAddress, string Original_WDescribe) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_WID));
            if ((Original_WName == null)) {
                throw new System.ArgumentNullException("Original_WName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_WName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_WArea));
            if ((Original_WAddress == null)) {
                throw new System.ArgumentNullException("Original_WAddress");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_WAddress));
            }
            if ((Original_WDescribe == null)) {
                throw new System.ArgumentNullException("Original_WDescribe");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_WDescribe));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string WName, double WArea, string WAddress, string WDescribe) {
            if ((WName == null)) {
                throw new System.ArgumentNullException("WName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(WName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((double)(WArea));
            if ((WAddress == null)) {
                throw new System.ArgumentNullException("WAddress");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(WAddress));
            }
            if ((WDescribe == null)) {
                throw new System.ArgumentNullException("WDescribe");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(WDescribe));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string WName, double WArea, string WAddress, string WDescribe, int Original_WID, string Original_WName, double Original_WArea, string Original_WAddress, string Original_WDescribe, int WID) {
            if ((WName == null)) {
                throw new System.ArgumentNullException("WName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(WName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((double)(WArea));
            if ((WAddress == null)) {
                throw new System.ArgumentNullException("WAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(WAddress));
            }
            if ((WDescribe == null)) {
                throw new System.ArgumentNullException("WDescribe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(WDescribe));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_WID));
            if ((Original_WName == null)) {
                throw new System.ArgumentNullException("Original_WName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_WName));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(Original_WArea));
            if ((Original_WAddress == null)) {
                throw new System.ArgumentNullException("Original_WAddress");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_WAddress));
            }
            if ((Original_WDescribe == null)) {
                throw new System.ArgumentNullException("Original_WDescribe");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_WDescribe));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(WID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591